parameterGrid<-expand.grid(mtry=c(2,3,4,5))
model<-train(yyes~.,data=trains,method="rf",trControl=parameterstrain,tuneGrid=parameterGrid)
model
predictions<-predict(model,tests)
tab<-table(predictions=predictions,actual=tests$y)
tab
general_bank_data_matix.Partition
plot(nn_rprop_multis)
head(output$net.result)
head(general_bank_data_matix[1,])
summary(general_bank_data_matix)
output<-predict(nn_rprop_multis,test)
xx=output[,1]
for ( i in 1:length(output[,1])) {
if(output[i,1]>=0.5)xx[i]=1
else xx[i]=0
}
confusionMatrix(as.factor(xx), as.factor(test[,28]))
for(i in 1:(k))
{
index <- sample(1:nrow(general_bank_data_matix),round((i/11)*nrow(general_bank_data_matix)))
train_cv <- general_bank_data_matix[index, ]
test_cv <- general_bank_data_matix[-index, ]
nn_rprop_multiss <- neuralnet(formulas, data=train_cv,
threshold = 0.25,linear.output = FALSE,hidden=c(3),
stepmax = 1e+05,
learningrate.limit = NULL, learningrate.factor = list(minus = 0.2, plus = 1.5), learningrate = NULL, lifesign = "none")
output<-predict(nn_rprop_multiss,test_cv)
xx=output[,1]
nrow(output[,1])
for ( j in 1:length(output[,1])) {
if(output[j,1]>=0.5)xx[j]=1
else xx[j]=0
}
resultnn<-confusionMatrix(as.factor(xx), as.factor(test_cv[,28]))
resultnn
####recall######
recallnn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[1,2])
####precision######
precisionnn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[2,1])
precisionnn
overall<-resultnn$overall
overall.accuracy<-overall['Accuracy']
result<-overall.accuracy
outs[i] <- result
result<-NULL
}
precisionnn
for(i in 1:(k))
{
index <- sample(1:nrow(general_bank_data_matix),round((i/11)*nrow(general_bank_data_matix)))
train_cv <- general_bank_data_matix[index, ]
test_cv <- general_bank_data_matix[-index, ]
nn_rprop_multiss <- neuralnet(formulas, data=train_cv,
threshold = 0.25,linear.output = FALSE,hidden=c(3),
stepmax = 1e+05,
learningrate.limit = NULL, learningrate.factor = list(minus = 0.2, plus = 1.5), learningrate = NULL, lifesign = "none")
output<-predict(nn_rprop_multiss,test_cv)
xx=output[,1]
nrow(output[,1])
for ( j in 1:length(output[,1])) {
if(output[j,1]>=0.5)xx[j]=1
else xx[j]=0
}
resultnn<-confusionMatrix(as.factor(xx), as.factor(test_cv[,28]))
resultnn
####recall######
recallnn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[1,2])
####precision######
precisionnn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[2,1])
precisionnn
overall<-resultnn$overall
overall.accuracy<-overall['Accuracy']
result<-overall.accuracy
outs[i] <- result
result<-NULL
}
precisionnn
for(i in 1:(k))
{
index <- sample(1:nrow(general_bank_data_matix),round((i/11)*nrow(general_bank_data_matix)))
train_cv <- general_bank_data_matix[index, ]
test_cv <- general_bank_data_matix[-index, ]
nn_rprop_multiss <- neuralnet(formulas, data=train_cv,
threshold = 0.25,linear.output = FALSE,hidden=c(3),
stepmax = 1e+05,
learningrate.limit = NULL, learningrate.factor = list(minus = 0.2, plus = 1.5), learningrate = NULL, lifesign = "none")
output<-predict(nn_rprop_multiss,test_cv)
xx=output[,1]
nrow(output[,1])
for ( j in 1:length(output[,1])) {
if(output[j,1]>=0.5)xx[j]=1
else xx[j]=0
}
resultnn<-confusionMatrix(as.factor(xx), as.factor(test_cv[,28]))
resultnn
####recall######
recallnn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[1,2])
####precision######
precisionnn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[2,1])
precisionnn
overall<-resultnn$overall
overall.accuracy<-overall['Accuracy']
result<-overall.accuracy
outs[i] <- result
result<-NULL
}
precisionnn
recallnn
mean(recallnn)
mean(precisionnn)
plot(nn_rprop_multis)
set.seed(7896129)
ind<-createDataPartition(bank_data.new$y,p=3/4,list = FALSE)
train<-general_bank_data_matix[ind,]
test<-general_bank_data_matix[-ind,]
nn_rprop_multis <- neuralnet(formulas, data=train,
threshold = 0.25,linear.output = FALSE,hidden=c(3),
stepmax = 1e+05,
learningrate.limit = NULL, learningrate.factor = list(minus = 0.5, plus = 1.2), learningrate = NULL, lifesign = "none")
parameterGrid<-expand.grid(mtry=c(2,3,4,5))
model<-train(yyes~.,data=trains,method="rf",trControl=parameterstrain,tuneGrid=parameterGrid)
model
predictions<-predict(model,tests)
tab<-table(predictions=predictions,actual=tests$y)
tab
library(MASS,quietly = TRUE)
library(caret)
library(neuralnet)
library(caTools)
set.seed(7896129)
ind<-createDataPartition(bank_data.new$y,p=3/4,list = FALSE)
train<-general_bank_data_matix[ind,]
test<-general_bank_data_matix[-ind,]
nn_rprop_multis <- neuralnet(formulas, data=train,
threshold = 0.25,linear.output = FALSE,hidden=c(3),
stepmax = 1e+05,
learningrate.limit = NULL, learningrate.factor = list(minus = 0.5, plus = 1.2), learningrate = NULL, lifesign = "none")
plot(nn_rprop_multis)
plot(recallnn, avg= "threshold", colorize=T,
main= "Precision/Recall graphs")
plot(recallnn, lty=3, col="grey78")
plot(recallnn, avg= "threshold", colorize=T,
main= "Precision/Recall graphs")
plot(recallnn, avg= "threshold", colorize=T,
main= "Precision/Recall graphs")
plot(recallnn)
plot(recallnn)
mean(recallnn)
plot(recallnn)
library(dplyr)
plot(recallnn)
plot(recallnn, avg= "threshold", colorize=T,
main= "Precision/Recall graphs")
plot(recallnn, lty=3, col="grey78")
nn_rprop_multiss <- neuralnet(formulas, data=train_cv,
threshold = 0.25,linear.output = FALSE,hidden=c(3),
stepmax = 1e+05,
learningrate.limit = NULL, learningrate.factor = list(minus = 0.2, plus = 1.5), learningrate = NULL, lifesign = "none")
plot(recallnn)
plot(precisionnn)
plot(nn_rprop_multis)
plot(precisionnn)
plot(recallnn, avg= "threshold", colorize=T,
main= "Precision/Recall graphs")
plot(recallnn, lty=3, col="grey78")
plot(recallnn, lty=3)
plot(recallnn, lty=3,type=1)
plot(recallnn, lty=3,type="1")
plot(recallnn, lty=3,type="l")
plot(precisionnn, avg= "threshold", colorize=T,
main= "Precision/Recall graphs")
plot(precisionnn, lty=3,type="l")
knn.3<- knn(train=trainknn,test=testknn,cl=train.labels,k=3)
knn.3
knnacc3<-100*sum(test.labels==knn.3)/NROW(test.labels)
knnacc3
knn.9<- knn(train=trainknn,test=testknn,cl=train.labels,k=9)
knn.9
knnacc9<-100*sum(test.labels==knn.9)/NROW(test.labels)
knnacc9
nn.9
knn.9<- knn(train=trainknn,test=testknn,cl=train.labels,k=9)
library(class)
knn.5<- knn(train=trainknn,test=testknn,cl=train.labels,k=5)
knn.5
knnacc5<-100*sum(test.labels==knn.5)/NROW(test.labels)
knnacc5
knn.25<- knn(train=trainknn,test=testknn,cl=train.labels,k=25)
knn.25
knnacc25<-100*sum(test.labels==knn.25)/NROW(test.labels)
knnacc25
knn.3<- knn(train=trainknn,test=testknn,cl=train.labels,k=3)
knn.3
knnacc3<-100*sum(test.labels==knn.3)/NROW(test.labels)
knnacc3
plot(knn.3)
outsk<-NULL
r<-1:100
m<-(1:10)*2 - 1
m[2]
for(i in 1:10)
{
knnch<- knn(train=trainknn,test=testknn,cl=train.labels,k=m[i])
knnacc100<-100*sum(test.labels==knnch)/NROW(test.labels)
knnacc100
outsk[i] <- knnacc100
knnacc100<-NULL
}
plot(outsk, type="b", xlab="K- Value",ylab="Accuracy level")
outsknnn
max(outsknnn)
bestk<-which(grepl(outsknnn[2], outsknnn))
bestk
NROW(outsknnn)
################ourbestk########## k=3 iken sağlanıyor
set.seed(7896129)
cvknn <- 10
knnaccuracyfor_cv<-NULL
for(i in 1:(cvknn))
{
indexknn <- sample(1:nrow(knn_bank_data_matix),round((i/11)*nrow(knn_bank_data_matix)))
trainknn_cv <- knn_bank_data_matix[indexknn,]
testknn_cv <- knn_bank_data_matix[-indexknn,]
test.labels_cv<-knn_bank_data_matix[-indexknn,28]
train.labels_cv<-knn_bank_data_matix[indexknn,28]
knn_multi_matrix <- knn(train=trainknn_cv,test=testknn_cv,cl=train.labels_cv,k=3)
knnacc_cv<-100*sum(test.labels_cv==knn_multi_matrix)/NROW(test.labels_cv)
knnaccuracyfor_cv[i]=knnacc_cv
}
NROW(knnaccuracyfor_cv)
knnaccuracyfor_cv
mean(knnaccuracyfor_cv)
recallknn<-NULL
precisionknn<-NULL
for(i in 1:(cvknn))
{
indexknn <- sample(1:nrow(knn_bank_data_matix),round((i/11)*nrow(knn_bank_data_matix)))
trainknn_cv <- knn_bank_data_matix[indexknn,]
testknn_cv <- knn_bank_data_matix[-indexknn,]
test.labels_cv<-knn_bank_data_matix[-indexknn,28]
train.labels_cv<-knn_bank_data_matix[indexknn,28]
knn_multi_matrix <- knn(train=trainknn_cv,test=testknn_cv,cl=train.labels_cv,k=3)
recallknn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[1,2])
####precision######
precisionknn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[2,1])
knnacc_cv<-100*sum(test.labels_cv==knn_multi_matrix)/NROW(test.labels_cv)
knnaccuracyfor_cv[i]=knnacc_cv
}
recallknn
precisionknn
for(i in 1:(cvknn))
{
indexknn <- sample(1:nrow(knn_bank_data_matix),round((i/11)*nrow(knn_bank_data_matix)))
trainknn_cv <- knn_bank_data_matix[indexknn,]
testknn_cv <- knn_bank_data_matix[-indexknn,]
test.labels_cv<-knn_bank_data_matix[-indexknn,28]
train.labels_cv<-knn_bank_data_matix[indexknn,28]
knn_multi_matrix <- knn(train=trainknn_cv,test=testknn_cv,cl=train.labels_cv,k=3)
recallknn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[1,2])
####precision######
precisionknn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[2,1])
knnacc_cv<-100*sum(test.labels_cv==knn_multi_matrix)/NROW(test.labels_cv)
knnaccuracyfor_cv[i]=knnacc_cv
}
recallknn
recallknn<-NULL
precisionknn<-NULL
cvknn <- 10
knnaccuracyfor_cv<-NULL
for(i in 1:(cvknn))
{
indexknn <- sample(1:nrow(knn_bank_data_matix),round((i/11)*nrow(knn_bank_data_matix)))
trainknn_cv <- knn_bank_data_matix[indexknn,]
testknn_cv <- knn_bank_data_matix[-indexknn,]
test.labels_cv<-knn_bank_data_matix[-indexknn,28]
train.labels_cv<-knn_bank_data_matix[indexknn,28]
knn_multi_matrix <- knn(train=trainknn_cv,test=testknn_cv,cl=train.labels_cv,k=3)
recallknn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[1,2])
####precision######
precisionknn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[2,1])
knnacc_cv<-100*sum(test.labels_cv==knn_multi_matrix)/NROW(test.labels_cv)
knnaccuracyfor_cv[i]=knnacc_cv
}
knnaccuracyfor_cv
mean(knnaccuracyfor_cv)
recallknn
precisionknn
recallknn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[1,2])
####precision######
precisionknn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[2,1])
for(i in 1:(cvknn))
{
indexknn <- sample(1:nrow(knn_bank_data_matix),round((i/11)*nrow(knn_bank_data_matix)))
trainknn_cv <- knn_bank_data_matix[indexknn,]
testknn_cv <- knn_bank_data_matix[-indexknn,]
test.labels_cv<-knn_bank_data_matix[-indexknn,28]
train.labels_cv<-knn_bank_data_matix[indexknn,28]
knn_multi_matrix <- knn(train=trainknn_cv,test=testknn_cv,cl=train.labels_cv,k=3)
recallknn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[1,2])
####precision######
precisionknn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[2,1])
knnacc_cv<-100*sum(test.labels_cv==knn_multi_matrix)/NROW(test.labels_cv)
knnaccuracyfor_cv[i]=knnacc_cv
}
knnaccuracyfor_cv
mean(knnaccuracyfor_cv)
recallknn
precisionknn
for(i in 1:(cvknn))
{
indexknn <- sample(1:nrow(knn_bank_data_matix),round((i/11)*nrow(knn_bank_data_matix)))
trainknn_cv <- knn_bank_data_matix[indexknn,]
testknn_cv <- knn_bank_data_matix[-indexknn,]
test.labels_cv<-knn_bank_data_matix[-indexknn,28]
train.labels_cv<-knn_bank_data_matix[indexknn,28]
knn_multi_matrix <- knn(train=trainknn_cv,test=testknn_cv,cl=train.labels_cv,k=3)
recallknn[i]<-knn_multi_matrix$table[1,1]/(knn_multi_matrix$table[1,1]+knn_multi_matrix$table[1,2])
####precision######
precisionknn[i]<-knn_multi_matrix$table[1,1]/(knn_multi_matrix$table[1,1]+knn_multi_matrix$table[2,1])
knnacc_cv<-100*sum(test.labels_cv==knn_multi_matrix)/NROW(test.labels_cv)
knnaccuracyfor_cv[i]=knnacc_cv
}
knnaccuracyfor_cv
mean(knnaccuracyfor_cv)
recallknn
precisionknn
recallknn[i]<-knn_multi_matrix$table[1,1]/(knn_multi_matrix$table[1,1]+knn_multi_matrix$table[1,2])
for(i in 1:(cvknn))
{
indexknn <- sample(1:nrow(knn_bank_data_matix),round((i/11)*nrow(knn_bank_data_matix)))
trainknn_cv <- knn_bank_data_matix[indexknn,]
testknn_cv <- knn_bank_data_matix[-indexknn,]
test.labels_cv<-knn_bank_data_matix[-indexknn,28]
train.labels_cv<-knn_bank_data_matix[indexknn,28]
knn_multi_matrix <- knn(train=trainknn_cv,test=testknn_cv,cl=train.labels_cv,k=3)
outputknn<-predict(knn_multi_matrix,testknn_cv)
xx=outputknn[,1]
nrow(outputknn[,1])
for ( j in 1:length(outputknn[,1])) {
if(output[j,1]>=0.5)xx[j]=1
else xx[j]=0
}
resultknn<-confusionMatrix(as.factor(xx), as.factor(test_cv[,28]))
recallknn[i]<-knn_multi_matrix$table[1,1]/(knn_multi_matrix$table[1,1]+knn_multi_matrix$table[1,2])
####precision######
precisionknn[i]<-knn_multi_matrix$table[1,1]/(knn_multi_matrix$table[1,1]+knn_multi_matrix$table[2,1])
knnacc_cv<-100*sum(test.labels_cv==knn_multi_matrix)/NROW(test.labels_cv)
knnaccuracyfor_cv[i]=knnacc_cv
}
outputknn<-predict(knn_multi_matrix,test.labels_cv)
knn_multi_matrix <- knn(train=trainknn_cv,test=testknn_cv,cl=train.labels_cv,k=3)
xx=knn_multi_matrix[,1]
nrow(knn_multi_matrix[,1])
for ( j in 1:length(knn_multi_matrix[,1])) {
if(output[j,1]>=0.5)xx[j]=1
else xx[j]=0
}
resultknn<-confusionMatrix(as.factor(xx), as.factor(test_cv[,28]))
knn_multi_matrix
xx=knn_multi_matrix[,1]
nrow(knn_multi_matrix[,1])
for ( j in 1:length(knn_multi_matrix[,1])) {
if(output[j,1]>=0.5)xx[j]=1
else xx[j]=0
}
resultknn<-confusionMatrix(as.factor(knn_multi_matrix), as.factor(testknn_cv[,28]))
resultknn
for(i in 1:(cvknn))
{
indexknn <- sample(1:nrow(knn_bank_data_matix),round((i/11)*nrow(knn_bank_data_matix)))
trainknn_cv <- knn_bank_data_matix[indexknn,]
testknn_cv <- knn_bank_data_matix[-indexknn,]
test.labels_cv<-knn_bank_data_matix[-indexknn,28]
train.labels_cv<-knn_bank_data_matix[indexknn,28]
knn_multi_matrix <- knn(train=trainknn_cv,test=testknn_cv,cl=train.labels_cv,k=3)
xx=knn_multi_matrix[,1]
nrow(knn_multi_matrix[,1])
for ( j in 1:length(knn_multi_matrix[,1])) {
if(output[j,1]>=0.5)xx[j]=1
else xx[j]=0
}
resultknn<-confusionMatrix(as.factor(knn_multi_matrix), as.factor(testknn_cv[,28]))
recallknn[i]<-resultknn$table[1,1]/(resultknn$table[1,1]+resultknn$table[1,2])
####precision######
precisionknn[i]<-resultknn$table[1,1]/(resultknn$table[1,1]+resultknn$table[2,1])
knnacc_cv<-100*sum(test.labels_cv==knn_multi_matrix)/NROW(test.labels_cv)
knnaccuracyfor_cv[i]=knnacc_cv
}
for(i in 1:(cvknn))
{
indexknn <- sample(1:nrow(knn_bank_data_matix),round((i/11)*nrow(knn_bank_data_matix)))
trainknn_cv <- knn_bank_data_matix[indexknn,]
testknn_cv <- knn_bank_data_matix[-indexknn,]
test.labels_cv<-knn_bank_data_matix[-indexknn,28]
train.labels_cv<-knn_bank_data_matix[indexknn,28]
knn_multi_matrix <- knn(train=trainknn_cv,test=testknn_cv,cl=train.labels_cv,k=3)
for ( j in 1:length(knn_multi_matrix[,1])) {
if(output[j,1]>=0.5)xx[j]=1
else xx[j]=0
}
resultknn<-confusionMatrix(as.factor(knn_multi_matrix), as.factor(testknn_cv[,28]))
recallknn[i]<-resultknn$table[1,1]/(resultknn$table[1,1]+resultknn$table[1,2])
####precision######
precisionknn[i]<-resultknn$table[1,1]/(resultknn$table[1,1]+resultknn$table[2,1])
knnacc_cv<-100*sum(test.labels_cv==knn_multi_matrix)/NROW(test.labels_cv)
knnaccuracyfor_cv[i]=knnacc_cv
}
for(i in 1:(cvknn))
{
indexknn <- sample(1:nrow(knn_bank_data_matix),round((i/11)*nrow(knn_bank_data_matix)))
trainknn_cv <- knn_bank_data_matix[indexknn,]
testknn_cv <- knn_bank_data_matix[-indexknn,]
test.labels_cv<-knn_bank_data_matix[-indexknn,28]
train.labels_cv<-knn_bank_data_matix[indexknn,28]
knn_multi_matrix <- knn(train=trainknn_cv,test=testknn_cv,cl=train.labels_cv,k=3)
resultknn<-confusionMatrix(as.factor(knn_multi_matrix), as.factor(testknn_cv[,28]))
recallknn[i]<-resultknn$table[1,1]/(resultknn$table[1,1]+resultknn$table[1,2])
####precision######
precisionknn[i]<-resultknn$table[1,1]/(resultknn$table[1,1]+resultknn$table[2,1])
knnacc_cv<-100*sum(test.labels_cv==knn_multi_matrix)/NROW(test.labels_cv)
knnaccuracyfor_cv[i]=knnacc_cv
}
recallknn
precisionknn
mean(recallknn)
mean(precisionknn)
plot(recallknn, avg= "threshold", colorize=T,
main= "Precision/Recall graphs")
plot(recallknn, lty=3, col="grey78", add=T)
plot(recallknn, avg= "threshold", colorize=T,
main= "Precision/Recall graphs")
plot(recallknn, lty=3,type="l")
plot(precisionknn, avg= "threshold", colorize=T,
main= "Precision/Recall graphs")
plot(precisionknn, lty=3,type="l")
resultknn
str(resultknn)
head(bank_data)
head(bank_data.new)
plot(outs)
for(i in 1:(k))
{
index <- sample(1:nrow(general_bank_data_matix),round((i/11)*nrow(general_bank_data_matix)))
train_cv <- general_bank_data_matix[index, ]
test_cv <- general_bank_data_matix[-index, ]
nn_rprop_multiss <- neuralnet(formulas, data=train_cv,
threshold = 0.25,linear.output = FALSE,hidden=c(3),
stepmax = 1e+05,
learningrate.limit = NULL, learningrate.factor = list(minus = 0.2, plus = 1.5), learningrate = NULL, lifesign = "none")
output<-predict(nn_rprop_multiss,test_cv)
xx=output[,1]
nrow(output[,1])
for ( j in 1:length(output[,1])) {
if(output[j,1]>=0.5)xx[j]=1
else xx[j]=0
}
resultnn<-confusionMatrix(as.factor(xx), as.factor(test_cv[,28]))
####recall######
recallnn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[1,2])
####precision######
precisionnn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[2,1])
overall<-resultnn$overall
overall.accuracy<-overall['Accuracy']
result<-overall.accuracy
outs[i] <- result
result<-NULL
}
library(neuralnet)
for(i in 1:(k))
{
index <- sample(1:nrow(general_bank_data_matix),round((i/11)*nrow(general_bank_data_matix)))
train_cv <- general_bank_data_matix[index, ]
test_cv <- general_bank_data_matix[-index, ]
nn_rprop_multiss <- neuralnet(formulas, data=train_cv,
threshold = 0.25,linear.output = FALSE,hidden=c(3),
stepmax = 1e+05,
learningrate.limit = NULL, learningrate.factor = list(minus = 0.2, plus = 1.5), learningrate = NULL, lifesign = "none")
output<-predict(nn_rprop_multiss,test_cv)
xx=output[,1]
nrow(output[,1])
for ( j in 1:length(output[,1])) {
if(output[j,1]>=0.5)xx[j]=1
else xx[j]=0
}
resultnn<-confusionMatrix(as.factor(xx), as.factor(test_cv[,28]))
####recall######
recallnn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[1,2])
####precision######
precisionnn[i]<-resultnn$table[1,1]/(resultnn$table[1,1]+resultnn$table[2,1])
overall<-resultnn$overall
overall.accuracy<-overall['Accuracy']
result<-overall.accuracy
outs[i] <- result
result<-NULL
}
library(caret)
library(plyr)
library(dplyr)
plot(outs, avg= "threshold", colorize=T,
main= "Precision/Recall graphs")
plot(outs, lty=3,type="l")
resultnn
str(output)
str(resultnn)
plot(outsk, type="b", xlab="K- Value",ylab="Accuracy level")
plot(knnaccuracyfor_cv, avg= "threshold", colorize=T,
main= "Precision/Recall graphs")
plot(knnaccuracyfor_cv, lty=3,type="l")
knn_bank_data_matix
NROW(trainknn)
plot(knn.3)
